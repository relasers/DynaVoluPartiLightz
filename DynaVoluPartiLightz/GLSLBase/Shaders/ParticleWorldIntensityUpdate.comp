#version 430 compatibility
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout( std140, binding= 4 ) buffer ParticlePosition
{
	vec4 Positions[];
};

layout( std140, binding= 6 ) buffer ParticleLightColor
{
	vec4 LightColor[];
};

layout( std140, binding= 7 ) buffer ParticleRangeAtten
{
	vec4 AttenRange[];
};


layout (rgba32f, binding = 0) uniform image3D LightDirTex;
layout (rgba32f, binding = 1) uniform image3D LightColorTex;

layout( local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
	
	uint gid = gl_GlobalInvocationID.x;
	ivec3 particlePosition =ivec3(Positions[ gid ].x, Positions[ gid ].y,Positions[ gid ].z );

	highp int dist = int(AttenRange[gid].w);

	
	for(int i =-dist;i<dist;++i)
	{
		for(int j =-dist;j<dist;++j)
		{
			for(int k =-dist;k<dist;++k)
			{
				ivec3 pixel_coords = particlePosition;

				pixel_coords += ivec3(i,j,k);
				pixel_coords.x = clamp(pixel_coords.x,0,128);
				pixel_coords.y = clamp(pixel_coords.y,0,128);
				pixel_coords.z = clamp(pixel_coords.z,0,128);
				
				// distance between lightcenter from picked texel
				float distvalue = distance(particlePosition, pixel_coords );
				if (distvalue > dist) continue;

				float attenuation = 1.0 / 
				(AttenRange[gid].x 
				+ AttenRange[gid].y * distvalue +
				AttenRange[gid].z * (distvalue * distvalue));    
				

				vec4 pixel = vec4(
				pixel_coords.x/128.0f,
				pixel_coords.y/128.0f,
				pixel_coords.z/128.0f,
				1
				);


				vec4 final_dir;
				vec3 light_dir = normalize( particlePosition - pixel_coords); // 우선 단위벡터로 넘겨보자.
				final_dir.xyz = light_dir.xyz;

				// 파티클 라이트 컬러를 사용안하고 intensity 값만 반영할 경우 사용하기 위해
				final_dir.a = attenuation;
				final_dir.a = max(0,final_dir.a);
				vec4 stored_dir_pixel = imageLoad(LightDirTex, pixel_coords); 
				vec4 stored_color_pixel = imageLoad(LightColorTex,pixel_coords);
				//if(final_color.a < stored_pixel.a ) light_dir.xyz = stored_pixel.xyz;
				vec4 final_color = attenuation * vec4(LightColor[gid].xyzw);
				final_color = max(vec4(0),final_color);
				// interpolation 해서 받아오고 반영해주어야함

				imageStore (LightDirTex, pixel_coords, stored_dir_pixel+final_dir );
				imageStore (LightColorTex, pixel_coords, stored_color_pixel + final_color );
				//imageStore (LightColorTex, pixel_coords, vec4(1) );
			}
		}
	}
   

}

// 블룸 추가, 토끼 추가, 씬 예쁘게, 파티클 텍스쳐 추가
// 닫혀있는 씬, 사이즈 ( 광량을 저장 ) ,x,y,z 방향벡터 , a intensity만

// nParticle * dist^3
// nBufferSize^3 